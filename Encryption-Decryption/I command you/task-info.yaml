type: edu
custom_name: stage4
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.List;

    public class EncryptDecryptTest extends BaseStageTest<String> {
        public EncryptDecryptTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-data", "Welcome to hyperskill!"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-data", "Hello"
                    )
                    .setAttach("Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-data", "012345678",
                        "-mode", "enc"
                    )
                    .setAttach("123456789"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-data", "\\jqhtrj%yt%m~ujwxpnqq&",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-data", "Hi"
                    )
                    .setAttach("Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-data", "222233334444"
                    )
                    .setAttach("111122223333")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            return new CheckResult(reply.trim().equals(clue.trim()));
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |-
    package encryptdecrypt;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            String operation = scanner.nextLine();
            String message = scanner.nextLine();

            int key = scanner.nextInt();

            if (operation.equals("enc")){
                enc(message, key);
            }
            if (operation.equals("dec")){
                dec(message, key);
            }
        }

        public static void enc (String message, int key){
            char temp;
            for (int i = 0; i < message.length(); i++){
                temp = (char) ((int) message.charAt(i) + key);
                System.out.print(temp);
            }
        }

        public static void dec (String message, int key){
            char temp;
            for (int i = 0; i < message.length(); i++){
                temp = (char) ((int) message.charAt(i) - key);
                System.out.print(temp);
            }
        }
    }
  learner_created: false
- name: src/encryptdecrypt/MainSample.java
  visible: true
  text: |-
    package encryptdecrypt;

    import java.util.Scanner;

    public class MainSample {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            char[] chars = scanner.nextLine().toCharArray();
            int shift = scanner.nextInt();

            char a = 'a';
            char z = 'z';
            int size = 26;

            for (char item : chars) {
                if (item >= a && item <= z) {
                    char shiftItem = (char) (((item - a + shift) % size) + a);
                    System.out.print(shiftItem);
                } else {
                    System.out.print(item);
                }
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/248/implement
status: Solved
record: 1
